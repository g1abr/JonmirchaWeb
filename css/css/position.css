/*
Posicionamiento CSS
    La propiedades Float y Position nos permiten modificar la posición natural de cualquier elemento del documento HTML

    El navegador coloca cada elemento teniendo en cuenta el orden en el que aparece en el documento y su tipo de visualización dependiendo si es un elemento de línea o de bloque 

    Con float y position podemos modificar este comportamiento 

    Elementos flotantes 
    -float: Convierte un elemento en flotante desplazándolo hasta la zona más a la izquierda o más a la derecha de la posición en la que originalmente se encontraba. 
    -clear limpia la flotación (usarlo en div vacio, despues del float)

    Tipos de Posicionamiento 
    -static (default)
    -relative
    -adsolute
    -fixed 
    -sticky

    Para mover los elementos posicionados se activan las propiedades:
    top (vertical eje Y)
    bottom (vertical eje Y) 
    left (horizontal eje X)
    right (horizontal eje X)
    z index (profundidad eje Z)

    La propiedades top y left van a tener preferencia por sobre bottom y right respectivamente

    Estas 5 propiedades no funcionan con el valor de static
 */
/* *,*{
    margin: 0;
    padding: 0;
} */

/* Static: Es el valor por defecto, significa que el elemento respeta el flujo del documento HTML por lo que no se puede mover ni posicionar */
.static {
  background: rosybrown;
  position: static;
  margin: 20px 0 0 0;
}

/* Relative: El elemento conserva sus dimensiones y posición original en el flujo del  documento. Si se mueve toma como referencia su posición original */

/* 
 El elemento permanecerá en el flujo natural de la página.

También hace que el elemento quede posicionado : actuará como un punto de anclaje para el bloque rosa absolutamente posicionado.

Además, reaccionará a las siguientes propiedades:

top
bottom
left
right
z-index

Contenedor de antepasados
Posición del elemento de destino
 */

.relative {
  background: #3666a4;
  position: relative;
  width: 20%;
  height: 30px;
  bottom: 15px;
  right: -800px;
}

/*
adsolute el elemento pierde sus dimensiones y posición original en el flujo del documento. Si se mueve puede tomar como referencia 2 elementos:
1) El primer ancestro con posicionamiento relativo
2) Si no encuentra un ancestro relativo, se mueve del documento
*/

.adsolute {
  background: pink;
  position: absolute;
  top: 0;
}

.relative-parent {
  position: relative;
  background: tomato;
  height: 40px;
}
.adsolute-childen {
  position: absolute;
  bottom: 0;
  left: 50px;
  background-color: cadetblue;
}
/* 
fixed: Elemento pierde sus dimensiones y posicion original en el flujo del documento. Si se mueve toma como referencia el documento HTML y queda fijo en la posición, cuando el scroll se mueva, el elemento no lo hará, queda FIJO
*/
.fixed {
  background-color: lightgreen;
  position: fixed;
  width: 300px;
  height: 100px;
  /* right: 20px;
    bottom: 10px; */
  top: 30px;
  left: 400px;
}

/* 
sticky: es una combinación de posicionamiento relave y fixed, para este posicionamiento las propiedades de top, left, bottom y right no mueven el elemento, sirven como un punto de referencia, mientras no llegun a ese valor el elemento se comparta como relative, cuando llega se convierte en fixed.

Para que este comportamiento funcione el elemento sticky debe ser hijo directo del body o su elemento contenedor debe tener dimensiones definidas y sólo será sticky dentro dela dimenciones de su contenedor padre 
*/

.sticky{
    background-color: aquamarine;
    width: 50%;
    position: sticky;
    top: 65px;
}

.sticky-parent{
margin-top: 20px;

height: 200px;
background: #3666a4;
border: thin solid tomato;
margin-bottom: 30px;
}
.sticky-child{
  background: tomato;
  padding-top: 32px;
  position: sticky;
  top: 40px;

}
/* 
z-index: propiedad que permite controlar la profundidad de los elementos posicionados su valor por defecto es auto, acepta números positivos, negativos y cero.

A mayor valor el elemento esta más al frente, a menor valor más al fondo. 

Un elemento padre nunca podrá estar sobre sus elementos hijos, sin embargo los elementos hijos si pueden dándoles un valor negativo y que el elemento padre no tenga definido valor de z-index.

*/
/* ir de 5 en 5, 100 en 100 */
.z-index-1, .z-index-2{

  background-color: crimson;
  border: thick solid #3666a4;
  color: white;
  padding: 3px;
  position: relative;
  width: 200px;
  height: 200px;


}
.z-index-1{
  z-index: -41;

}
.z-index-2{
  bottom:  200px;
  left: 23px;
  z-index: -2;

}
.z-index-parent{
  background-color: chartreuse;
  width: 300px;
  height: 300px;
  position: relative;
}
.z-index-child{
  background-color:coral ;
  position: relative;
  width: 150px;
  height: 150px;
  top: -75px;
  left: 75px;


}