html{
    box-sizing: border-box;
    font-family: sans-serif;
    font-size: 16px;
}

*, *::after, *::before{
    box-sizing: inherit;
}
body{
    background: #4776E6;  /* fallback for old browsers */
    background: -webkit-linear-gradient(to right, #8E54E9, #4776E6);  /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(to right, #8E54E9, #4776E6); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
      
}
h1, h2, h3, h4{
    color: azure;
    text-align: center;
}
h3, h4{
    text-align: left;
}
.box{
    border: thick solid red;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
    width: 200px; 
    height: 200px;
}
.card{
    border: thick solid #000;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 5rem;
    width: 600px;
    height: 400px;
}

.card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: 0 50%;
}


/* Transiciones:
    transition-property: Osea que propiedad le quiero una transición 
    transition-duration: cuanto tiempo va durar mi transición (puede expresarse en segundo, milisegundos) 
    transition-timing-function: tenemos varias funciones que van a aplicar, con que efecto vamos a aplicar la transición  (Valores: linear "lineal", ease (aceleración) ease-in (aceleración al principio), ease-out (aceleración al final), ease-in-out () steps, por defaul none
    transition-delay: tiempo de espera antes de que comience la transción 

    transtion: property duration timing-funcion delay
*/

.transitions .box{
    background-color: magenta; 
    transition-property: background-color;  /* La propiedad que quiero la transición */
    transition-duration: 500ms ; /*La duración de la transición  */
    transition-timing-function: ease; /* el tiempo con que efecto vamos a aplicar la transición */
    transition-delay:  0.5s; /* tiempo de espera antes de aplicar el efecto */
    border-color: #4776E6 ;
    transition: border-color 2s linear 1s ;

    /* Para que no se pierda la animación del fondo sin quitar el borde, le damos all para todos los elementos animables  */
    transition: all 2s ease-in-out 250ms ;

}

.transitions .box:hover{
    background-color: aliceblue;
    border-color:aquamarine ;
    border-radius: 50%;
}

/* No todas las propiedades son animables
Aquí el listado de las propiedades animables https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties

y estas según chat no se pueden animar display, position float clear overflow, overflow-x,  verflow-y margin-* padding-*  border-style  border-width box-shadow  margin-*  padding-* border-style  border-width box-shadow

*/

/* Vamos a ver como controlar que cada propiedad tenga su propia funcion de transición   */

.transitions .card{
    transition: opacity 1s ease-out, border-color 3s steps(5),
    filter 2s ease-in 1s, box-shadow 1.5s linear 2s;
}

.transitions .card:hover{
    opacity: 0.75;
    border-color: #8E54E9;
    filter: blur(0.15rem);
    box-shadow: 1rem 1rem 2rem 0.5rem #000;
}

.transitions .card img{
    transform: object-position 2s ease-in-out 3s;
}
.transitions .card img:hover{
    object-position: 100% 50%;
}
.transform-2d img {
    transition: transform 2s ease-in-out;
}
.transform-2d img:hover{
    transform: none;
    transform: translateX(1.5rem); /* Se desplaza la imagen en el eje x (o el objeto) a la distancia que establezcas  */
    transform: translateX(-2.5rem); /*También acepta valores negativos */
    transform: translateY(2.5rem); /*Se desplaza el elemento hacia el eje Y   */
    transform: translate(-4.5rem, 4.5rem); /* primer valor para x, segundo para Y*/
    transform: translate(50%, 50%);  /* Usando valores porcentuales dependiendo del tamaño, toma de referencia el cien porcierto para el tamaño del objeto a base de eso se mueve  */
    transform: translate(-50%, -50%); /* Se puede colocar porcentajes negativos */
    transform: translate(50%, 50px);

    /* Escala  aumenta el tamaño*/
    transform: scaleX(2);
    transform: scaleY(2);
    transform: scale(2, 2);
    transform: scale(-1, 2);

    /* Rotación  */
    /* Valores: grados, radianes */
    transform: rotateX(90deg); /* La rotación en x, no se puede apreciar muy bien en dos dimenciones */
    transform: rotateY(60deg);
    transform: rotateY(60deg);
    transform: rotateY(90deg);
    transform: rotateZ(-60deg); /* La rotación en z es perfecta en dimeción en 2D */

    /* skew */
    transform: skewX(20deg);
    transform: skewX(-20deg);
    transform: skewY(20deg);
    transform: skew(-20deg);
    transform: skew(20deg, -20deg);

    /* Matrix (scaleX() skewY(), skewX(), scaleY(), translateX(), translateY() */
    /* Calculos */
    transform: matrix(1, 2, 2, 1, 20, 10); 
    /* Calculos matematicos  para utilizar esta funcion 
    https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix
    */
    /* red transformaciones multiples */
    transform: translate(25%, -50%) rotate(240deg) skew(10deg, 20deg) scale(1rem, -2rem) ;

}
/* Activar la perspectiva */
.transform-3d{
    /* Elemento padre */
    perspective: 10rem;
}

.transform-3d img{
    transition: transform 2s ease-in-out;
}
.transform-3d img:hover{
    /* Para activar la perspectiva */
    /* transform:  translateZ(4.5rem); */
    transform: perspective(1000px) translateZ(4rem); /* perspectiva se activa desde le elemento padre, la perspectiva resive un valor, que puede estar representado en pixeles, rem, em, etc. Va indicar la longitud que tenemos para manejar la ilución de perspectiva en tres dimensiones   */
      
    transform: perspective(100rem) translateZ(4rem); /* Profundidad */
    transform: perspective(1rem) translateZ(4rem); /* Profundidad */
    transform: translateZ(4rem); /* Agregando la propiedad perspectiva al elemento padre */

    transform: translate3d(2rem, 50%, -3rem);  /* x, y, profundidad  */
    transform: scaleZ(1.5);
    transform: scale3d(2, 0.5,  3 ); /* primer valor para x, segundo para y, tercero el eje z (profundidad)   */
    transform: rotateX(-60deg);
    transform: rotateY(-60deg);
    transform: rotateY(-90deg);
    transform: rotate3d(1, 1, 1, 45deg); /* Valores, son tres valores numericos que hacen referencia a nodos vectoriales en cada uno de los ejes de la perspectiva tres D es decir (X, Y & Z) y luego declaramos un grado de inclinación   */
    transform: rotate3d(1, 0.5, 0, -45deg);
    /* https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d() */
    transform: matrix3d(1, 0, 0, 0, 0, 1, 6, 0, 0, 0, 1, 0, 50, 100, 0, 1.1);
    transform:  rotate3d(-1, 2.5,  2, 60deg);
    transform:  rotate3d(-1, 2.5,  -2, 60deg) translate(2rem, 50%, -3rem) scale3d(2,-0.5, 3 );
    
}

/* El origen de la transformación */
.transform-origin img{
    transition: transform 2s ease-in-out;
    /*Esta propiedad recibe los valores, x, y, z transform-origin: ; */
    transform-origin: 50% 50% 0;/* defaul */
    transform-origin: 0; /* Si es un solo valor, aplica al eje x y el eje y  */
    transform-origin: 0 0; /* X Y  */
    /* Con palabra clave */
    transform-origin: top right;
    transform-origin: top left;
    transform-origin: bottom left;
    transform-origin: bottom right;
    transform-origin: bottom center;
    transform-origin: center center;
    transform-origin: -2rem -3rem;
    transform-origin: 2rem 3rem;
    transform-origin: 2rem 75%;
    transform-origin: 25% 75%;
    transform-origin: -5% -5%;
    transform-origin: 30% 90%;

}

.transform-origin img:hover{
   transform: rotate(30deg);
}

/* blue https://youtu.be/mYkmedvCLxY?si=d1jDRkDUfV4yUYqf&t=4293 */


.flip-card-1, .flip-card-2 {
  border: thick solid #000;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 5rem;
  width: 600px;
  height: 400px;
    /* Las caras se posicionen absolutamente */
    /* Debo poner en el contenedor padre la posición relativa, y luego al elemento el posicionamiento absoluto, porque entoces si no agregamos esta posición al elemento, este se posicionará en la posición absoluta sobre el html */
  position: relative;
  cursor: pointer;
  transition: transform 1s ease-in-out;
   /* Aplicar la perspectiva */
  perspective: 10rem;
    /* Además agregar esta propiedad, transform-style: estilo de la transformación  
    Establece si los hijos de un elemento que tiene perspectiva en tres dimenciones, esta propiedad va a determinar como se va a comportar en el espacio 3D 
    */
  transform-style: flat;/* Valor por defecto, en el mismo plano trabaje los elementos hijos */
  transform-style: preserve-3d; /* Le estamos diciendo que los elementos hijos tengan su propia perspectiva independiente  Lo significa que a los elementos le puedo dar una transformación en 3D red */
}
.flip-card-2{
    transform-origin: center right;
}
.flip-card-1:hover {
    transform: rotateY(180deg);
  }

.flip-card-2:hover{
    transform: translateX(-100%) rotateY(-180deg);
}

.flip-card-1 img, .flip-card-2 img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: 0 50%;
}

.flip-face {
  position: absolute;
  width: 100%;
  height: 100%;
   /* Determina que las caras, (cuando un elemento en la interfaz va a tener dos lados determina como es que se va a visualizar esas caras) Este elemento tiendo dos valores visible(valor por defaul), hidden */

  backface-visibility: visible;
  backface-visibility: hidden; /* Este elemento necesita la perspectiva, no es visible en dos dimensiones, necesitamos tres dimensiones,   */
}

.flip-front {
  transform: rotateY(0deg);/* Este delante, piensa como cubo */

}

.flip-back {
  transform: rotateY(180deg); /* Este detras  */
}

/* Animaciones */

@keyframes myAwesomeAnimation {
    /* Fotogramas de inicio */
    from{
        opacity: 0;
        transform: translateX(0);
    }
        /* Fotogramas final */
    to{
        opacity: 1;
        transform: translateX(100%);
    }
}


.my-animation{
    /* Propiedades animation: name duration timing-function delay iteration-count direction fill-mode;    */
    animation-name: myAwesomeAnimation;/* Darle nombre a la animación  */
    animation-duration: 5s;
    animation-timing-function: cubic-bezier(1,0,0,1); /* Agregar los ejectos de aceleración y tambien esta propiedad cubic-bezier */
    animation-timing-function: cubic-bezier(0.33, 0.92, 0.92, 0.36);
    animation-timing-function: ease-in-out;
    animation-delay: 1500ms;  /* El retraso que va a tener la animación, puede expresarse en milisegundo  */
    animation-delay: 0; /* sin retraso */
    animation-iteration-count: 2;    /* numero de veces que quiero que se haga la animación  */
    animation-iteration-count: infinite;  /* Infinita */
    animation-direction: reverse;
    animation-direction: alternate-reverse;
    animation-direction: normal;
    animation-fill-mode: none;
    /* Al final de la animación se queda con los estilos finales de la animación  */
    animation-fill-mode: forwards; /* Esta valor para que la animación se quede con los estilos que definieron en el ultimo fotograma */
    animation-fill-mode: backwards; /* Al inicio de la animación se queda con los estilos iniciales de la animación */
    animation-fill-mode: both; /* both aplica al mismo tiempo forwards y  backwards */
    /* Estado, corre la animación, pausar la animación, pero es mejor usarlo con js, para los estados */
    animation-play-state: paused;
    animation-play-state: running; /* defaul */
    animation: myAwesomeAnimation 2s ease-in-out 150ms 3 reverse both;
    animation: myAwesomeAnimation 1.5s ease 250ms 7 alternate both running;
    animation: myAwesomeAnimation 1.5s ease 250ms 7 alternate backwards running;
}
@keyframes myAwesomeAnimation2 {
/* Fotogramas iniciales e intermedios, agregar fotogramas a la animación:   */

    0% {
      opacity: 0;
      transform: translateX(0);
    }
  
    50% {
      opacity: 0.5;
      transform: translateX(-50%);
    }
  
    75% {
      transform: translateX(-75%);
    }
  
    100% {
      opacity: 1;
      transform: translateX(100%);
    }
  }
  
  .my-animation-2 {
    animation: myAwesomeAnimation2 2s;
    animation: myAwesomeAnimation2 5s;
    animation: myAwesomeAnimation2 1s;
    animation: myAwesomeAnimation2 6s;
  }

  @keyframes multipleAnimation1 {
    0% {
      opacity: 1;
      filter: brightness(1.5);
    }
  
    50% {
      opacity: 0;
      filter: hue-rotate(120deg);
    }
  
    100% {
      opacity: 1;
    }
  }
  
  @keyframes multipleAnimation2 {
    0% {
      transform: translateY(0);
    }
  
    50% {
      transform: translateY(-100%);
    }
    70%{
        transform-origin: center bottom;
        transform: rotateY(30deg);
    }
  
    100% {
      transform: translateY(0);
    }
  }
  
  .animation-multiple {
    animation: multipleAnimation1 2s infinite;
    animation: multipleAnimation2 2s infinite;
    animation: multipleAnimation1 2s infinite, multipleAnimation2 1s 3 ease-in-out;
  }

/* El efecto prender y apagar  */
@keyframes fadeln{
    0%{
        opacity: 0;
    }
    100%{
        opacity: 1;
    }
}
@keyframes fadeOut{
    0%{
        opacity: 1;
    }
    100%{
        opacity: 0;
    }
}


.fade-in{
    font-size: 5vw;
    animation: fadeln 2s linear infinite alternate both;
    text-align: center;
}
.fade-out{
    text-align: center;
    font-size: 5vw;
    animation: fadeOut 2s linear infinite alternate both;
}

@keyframes shake{
    /* para agregar varios framers que van a tomar el mismo valor agrupamos (como los selectores)  */
    10%, 
    90%{
        transform: translate(-1px, -2px);
    }
   20%, 
    80%{
        transform: translate(2px, 0);
    }
    30%, 50%, 70%{
        transform: translate(-4px, -0);
    }
    40%, 60%{
        transform: translate(4px, 0);
    }
}
.shake{
    font-size: 5vw;
    text-align: center;
}
.shake:hover{
    cursor: pointer;
    animation: shake 1s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
}

/* Efecto pulsación */
@keyframes pulse{
    0%{
        transform: scale(1.1);
    }

    50%{
        transform: scale(0.8);
    }
    
    100%{
        transform: scale(1);
    }

}
.pulse{
    font-size: 5vw;
    text-align: center;
    cursor: pointer;
    padding-bottom: 2rem;
    animation: pulse 2s linear infinite both;
}

/* Hacer corazón artesanal  */

@keyframes heartColor {
    10% {
      background-color: rgb(252, 125, 125);
    }
  }
.heart {
    position: relative;
    margin-left: auto;
    margin-right: auto;
    width: 10vw;
    height: 10vw;
    animation: pulse 1s infinite;
  }
  /* Usar la misma propiedad de medida */
  .heart::after,
  .heart::before {
    position: absolute;
    content: "";
    left: 5vw;
    top: 0;
    width: 5vw;
    height: 8vw;
    background-color: red;
    transform: rotate(-45deg);
    transform-origin: 0 100%;
    border-radius: 5vw 5vw 0 0;
    animation: heartColor 1s infinite;
  }
  
  .heart::after {
    left: 0;
    transform: rotate(45deg);
    transform-origin: 100% 100%;
  }
@keyframes spinner{
  0%{
    transform: rotate(0deg);
  }
  100%{
    transform: rotate(360deg);

  }
}

  
  .spinner{
    /* background-color: #98ea4b; */
    width: 5vw;
    height: 5vw;
    margin-left: auto;
    margin-right: auto;
    border-radius: 50%;
    border: 0.5vw solid rgba(209, 197, 197, 0.148);
    border-left-color: #4776E6 ;
    animation: spinner 2s ease-in-out infinite ;
  }

.button{
  text-align: center;
  width: 100%;
  margin-left: auto;
  margin-right: auto;
}

.btn{
  position: relative;
  border: none;
  border-radius: 0.25rem;
   padding: .2rem;
   width: 15rem;
   height: 2.5rem;
   font-size: 1.25rem;
   cursor: pointer;
   overflow: hidden;
   background-color: rgb(198, 243, 246);
   font-weight: bold;
   box-shadow: 0.25rem 0.25rem 0.5rem 0.25rem rgba(0, 0, 0, 0.42);
}
/* En tu elemento after(porque quiero que este despues del botón)   */
.anim-bottom::after{
  content: "";
  position: absolute;
  /* Abajo le damos 0 */
  bottom: 0;
  /* con el width en cero no se vera nada, eso lo cambiaremos en el estado hover */
  width: 0;
  height: .25rem;
  background-color: rgb(0, 227, 11);
/* Aquí el truco, vamos a hacer una transformación con estas propiedades */
transition: width 0.5s ease, left 0.5s ease, right 0.5s ease;
}
/* Aquí cambiamos el tamaño del width para que se vea el background-color */
.anim-bottom:hover::after {
  width: 100%;
}
/* Llamando las clases cambiamos el valor de left y right respectivamente  */
.to-left::after {
  left: 0;
}

.to-center::after {
  left: 50%;
}

.to-center:hover::after {
  left: 0;
}

.to-right::after {
  right: 0;
}

.anim-bg-gradient{
  background-image: linear-gradient(to right, rgba(212, 104, 122, 0.508), rgba(238, 130, 238, 0.881),
   rgb(30, 255, 0), rgb(0, 183, 255));
  color: white;
  background-size: 300% 100%;
  transition:  background-position 0.5s ease-in-out;
}
.anim-bg-gradient:hover{
  background-position: 100% 0;
  color: #000;
}

.tabs-menu{
  position: relative;
  width: 70%;
  height: 3rem;
  margin-left: auto;
  margin-right: auto;
  padding: 1rem;
  border-radius: 1rem;
  background-color: #f4c86fa0;
  display: flex;
  justify-content: space-between;
  justify-items: center;
  color: white;
  font-weight: bold;

}

/* Oculatar checkbook, radio */
.tabs-menu input[type="radio"]{
  display: none;
}

.tabs-menu label{
  position: relative;
/* Vamos a provechar la funcion cal() */
  width: calc(100% / 4 - 0.5rem);
  text-align: center;
  cursor: pointer;
}

.tabs-menu label:hover{
  color: rebeccapurple;

}

/* Quiero que cuando un input este en estado checked, quiero afectar la etiqueta label que esta como hermana */
.tabs-menu input[type="radio"]:checked+label{
  color: rebeccapurple;
}
.tab-bg-hover{
  position: absolute;
}